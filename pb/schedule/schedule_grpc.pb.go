// make file proto for schedule availability doctor from doctor.proto file

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: schedule.proto

package schedule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduleAvailabilityDoctorService_Create_FullMethodName                 = "/schedule.ScheduleAvailabilityDoctorService/Create"
	ScheduleAvailabilityDoctorService_Read_FullMethodName                   = "/schedule.ScheduleAvailabilityDoctorService/Read"
	ScheduleAvailabilityDoctorService_ReadScheduleByDoctorId_FullMethodName = "/schedule.ScheduleAvailabilityDoctorService/ReadScheduleByDoctorId"
	ScheduleAvailabilityDoctorService_ReadScheduleByDay_FullMethodName      = "/schedule.ScheduleAvailabilityDoctorService/ReadScheduleByDay"
	ScheduleAvailabilityDoctorService_Update_FullMethodName                 = "/schedule.ScheduleAvailabilityDoctorService/Update"
	ScheduleAvailabilityDoctorService_Delete_FullMethodName                 = "/schedule.ScheduleAvailabilityDoctorService/Delete"
)

// ScheduleAvailabilityDoctorServiceClient is the client API for ScheduleAvailabilityDoctorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleAvailabilityDoctorServiceClient interface {
	Create(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error)
	Read(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error)
	ReadScheduleByDoctorId(ctx context.Context, in *ScheduleAvailabilityDoctorRequestByDoctorId, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error)
	ReadScheduleByDay(ctx context.Context, in *ScheduleAvailabilityDoctorRequestByDay, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error)
	Update(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error)
	Delete(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error)
}

type scheduleAvailabilityDoctorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleAvailabilityDoctorServiceClient(cc grpc.ClientConnInterface) ScheduleAvailabilityDoctorServiceClient {
	return &scheduleAvailabilityDoctorServiceClient{cc}
}

func (c *scheduleAvailabilityDoctorServiceClient) Create(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error) {
	out := new(ScheduleAvailabilityDoctorResponse)
	err := c.cc.Invoke(ctx, ScheduleAvailabilityDoctorService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAvailabilityDoctorServiceClient) Read(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error) {
	out := new(ScheduleAvailabilityDoctorResponse)
	err := c.cc.Invoke(ctx, ScheduleAvailabilityDoctorService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAvailabilityDoctorServiceClient) ReadScheduleByDoctorId(ctx context.Context, in *ScheduleAvailabilityDoctorRequestByDoctorId, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error) {
	out := new(ScheduleAvailabilityDoctorResponse)
	err := c.cc.Invoke(ctx, ScheduleAvailabilityDoctorService_ReadScheduleByDoctorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAvailabilityDoctorServiceClient) ReadScheduleByDay(ctx context.Context, in *ScheduleAvailabilityDoctorRequestByDay, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error) {
	out := new(ScheduleAvailabilityDoctorResponse)
	err := c.cc.Invoke(ctx, ScheduleAvailabilityDoctorService_ReadScheduleByDay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAvailabilityDoctorServiceClient) Update(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error) {
	out := new(ScheduleAvailabilityDoctorResponse)
	err := c.cc.Invoke(ctx, ScheduleAvailabilityDoctorService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleAvailabilityDoctorServiceClient) Delete(ctx context.Context, in *ScheduleAvailabilityDoctorRequest, opts ...grpc.CallOption) (*ScheduleAvailabilityDoctorResponse, error) {
	out := new(ScheduleAvailabilityDoctorResponse)
	err := c.cc.Invoke(ctx, ScheduleAvailabilityDoctorService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleAvailabilityDoctorServiceServer is the server API for ScheduleAvailabilityDoctorService service.
// All implementations must embed UnimplementedScheduleAvailabilityDoctorServiceServer
// for forward compatibility
type ScheduleAvailabilityDoctorServiceServer interface {
	Create(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error)
	Read(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error)
	ReadScheduleByDoctorId(context.Context, *ScheduleAvailabilityDoctorRequestByDoctorId) (*ScheduleAvailabilityDoctorResponse, error)
	ReadScheduleByDay(context.Context, *ScheduleAvailabilityDoctorRequestByDay) (*ScheduleAvailabilityDoctorResponse, error)
	Update(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error)
	Delete(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error)
	mustEmbedUnimplementedScheduleAvailabilityDoctorServiceServer()
}

// UnimplementedScheduleAvailabilityDoctorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleAvailabilityDoctorServiceServer struct {
}

func (UnimplementedScheduleAvailabilityDoctorServiceServer) Create(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedScheduleAvailabilityDoctorServiceServer) Read(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedScheduleAvailabilityDoctorServiceServer) ReadScheduleByDoctorId(context.Context, *ScheduleAvailabilityDoctorRequestByDoctorId) (*ScheduleAvailabilityDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadScheduleByDoctorId not implemented")
}
func (UnimplementedScheduleAvailabilityDoctorServiceServer) ReadScheduleByDay(context.Context, *ScheduleAvailabilityDoctorRequestByDay) (*ScheduleAvailabilityDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadScheduleByDay not implemented")
}
func (UnimplementedScheduleAvailabilityDoctorServiceServer) Update(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedScheduleAvailabilityDoctorServiceServer) Delete(context.Context, *ScheduleAvailabilityDoctorRequest) (*ScheduleAvailabilityDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedScheduleAvailabilityDoctorServiceServer) mustEmbedUnimplementedScheduleAvailabilityDoctorServiceServer() {
}

// UnsafeScheduleAvailabilityDoctorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleAvailabilityDoctorServiceServer will
// result in compilation errors.
type UnsafeScheduleAvailabilityDoctorServiceServer interface {
	mustEmbedUnimplementedScheduleAvailabilityDoctorServiceServer()
}

func RegisterScheduleAvailabilityDoctorServiceServer(s grpc.ServiceRegistrar, srv ScheduleAvailabilityDoctorServiceServer) {
	s.RegisterService(&ScheduleAvailabilityDoctorService_ServiceDesc, srv)
}

func _ScheduleAvailabilityDoctorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleAvailabilityDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleAvailabilityDoctorService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Create(ctx, req.(*ScheduleAvailabilityDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAvailabilityDoctorService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleAvailabilityDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleAvailabilityDoctorService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Read(ctx, req.(*ScheduleAvailabilityDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAvailabilityDoctorService_ReadScheduleByDoctorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleAvailabilityDoctorRequestByDoctorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAvailabilityDoctorServiceServer).ReadScheduleByDoctorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleAvailabilityDoctorService_ReadScheduleByDoctorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAvailabilityDoctorServiceServer).ReadScheduleByDoctorId(ctx, req.(*ScheduleAvailabilityDoctorRequestByDoctorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAvailabilityDoctorService_ReadScheduleByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleAvailabilityDoctorRequestByDay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAvailabilityDoctorServiceServer).ReadScheduleByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleAvailabilityDoctorService_ReadScheduleByDay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAvailabilityDoctorServiceServer).ReadScheduleByDay(ctx, req.(*ScheduleAvailabilityDoctorRequestByDay))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAvailabilityDoctorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleAvailabilityDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleAvailabilityDoctorService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Update(ctx, req.(*ScheduleAvailabilityDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleAvailabilityDoctorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleAvailabilityDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleAvailabilityDoctorService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleAvailabilityDoctorServiceServer).Delete(ctx, req.(*ScheduleAvailabilityDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleAvailabilityDoctorService_ServiceDesc is the grpc.ServiceDesc for ScheduleAvailabilityDoctorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleAvailabilityDoctorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.ScheduleAvailabilityDoctorService",
	HandlerType: (*ScheduleAvailabilityDoctorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ScheduleAvailabilityDoctorService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ScheduleAvailabilityDoctorService_Read_Handler,
		},
		{
			MethodName: "ReadScheduleByDoctorId",
			Handler:    _ScheduleAvailabilityDoctorService_ReadScheduleByDoctorId_Handler,
		},
		{
			MethodName: "ReadScheduleByDay",
			Handler:    _ScheduleAvailabilityDoctorService_ReadScheduleByDay_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ScheduleAvailabilityDoctorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ScheduleAvailabilityDoctorService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
