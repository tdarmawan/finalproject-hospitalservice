// make proto file for appointment service (createappointment, readappointment, emailappointment)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: appointment.proto

package appointment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppointmentService_CreateAppointment_FullMethodName   = "/appointment.AppointmentService/CreateAppointment"
	AppointmentService_ReadAppointmentById_FullMethodName = "/appointment.AppointmentService/ReadAppointmentById"
	AppointmentService_EmailAppointment_FullMethodName    = "/appointment.AppointmentService/EmailAppointment"
	AppointmentService_ReadAppointmentAll_FullMethodName  = "/appointment.AppointmentService/ReadAppointmentAll"
)

// AppointmentServiceClient is the client API for AppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppointmentServiceClient interface {
	CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error)
	ReadAppointmentById(ctx context.Context, in *AppointmentId, opts ...grpc.CallOption) (*ReadAppointmentResponse, error)
	EmailAppointment(ctx context.Context, in *EmailAppointmentRequest, opts ...grpc.CallOption) (*EmailAppointmentResponse, error)
	ReadAppointmentAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadAppointmentResponse, error)
}

type appointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentServiceClient(cc grpc.ClientConnInterface) AppointmentServiceClient {
	return &appointmentServiceClient{cc}
}

func (c *appointmentServiceClient) CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error) {
	out := new(CreateAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_CreateAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ReadAppointmentById(ctx context.Context, in *AppointmentId, opts ...grpc.CallOption) (*ReadAppointmentResponse, error) {
	out := new(ReadAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ReadAppointmentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) EmailAppointment(ctx context.Context, in *EmailAppointmentRequest, opts ...grpc.CallOption) (*EmailAppointmentResponse, error) {
	out := new(EmailAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_EmailAppointment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ReadAppointmentAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadAppointmentResponse, error) {
	out := new(ReadAppointmentResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ReadAppointmentAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServiceServer is the server API for AppointmentService service.
// All implementations must embed UnimplementedAppointmentServiceServer
// for forward compatibility
type AppointmentServiceServer interface {
	CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error)
	ReadAppointmentById(context.Context, *AppointmentId) (*ReadAppointmentResponse, error)
	EmailAppointment(context.Context, *EmailAppointmentRequest) (*EmailAppointmentResponse, error)
	ReadAppointmentAll(context.Context, *Empty) (*ReadAppointmentResponse, error)
	mustEmbedUnimplementedAppointmentServiceServer()
}

// UnimplementedAppointmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppointmentServiceServer struct {
}

func (UnimplementedAppointmentServiceServer) CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) ReadAppointmentById(context.Context, *AppointmentId) (*ReadAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAppointmentById not implemented")
}
func (UnimplementedAppointmentServiceServer) EmailAppointment(context.Context, *EmailAppointmentRequest) (*EmailAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) ReadAppointmentAll(context.Context, *Empty) (*ReadAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAppointmentAll not implemented")
}
func (UnimplementedAppointmentServiceServer) mustEmbedUnimplementedAppointmentServiceServer() {}

// UnsafeAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentServiceServer will
// result in compilation errors.
type UnsafeAppointmentServiceServer interface {
	mustEmbedUnimplementedAppointmentServiceServer()
}

func RegisterAppointmentServiceServer(s grpc.ServiceRegistrar, srv AppointmentServiceServer) {
	s.RegisterService(&AppointmentService_ServiceDesc, srv)
}

func _AppointmentService_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CreateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, req.(*CreateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ReadAppointmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ReadAppointmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ReadAppointmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ReadAppointmentById(ctx, req.(*AppointmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_EmailAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).EmailAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_EmailAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).EmailAppointment(ctx, req.(*EmailAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ReadAppointmentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ReadAppointmentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ReadAppointmentAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ReadAppointmentAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentService_ServiceDesc is the grpc.ServiceDesc for AppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appointment.AppointmentService",
	HandlerType: (*AppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppointment",
			Handler:    _AppointmentService_CreateAppointment_Handler,
		},
		{
			MethodName: "ReadAppointmentById",
			Handler:    _AppointmentService_ReadAppointmentById_Handler,
		},
		{
			MethodName: "EmailAppointment",
			Handler:    _AppointmentService_EmailAppointment_Handler,
		},
		{
			MethodName: "ReadAppointmentAll",
			Handler:    _AppointmentService_ReadAppointmentAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appointment.proto",
}
