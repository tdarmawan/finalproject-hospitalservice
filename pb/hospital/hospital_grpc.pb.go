// make proto file for hospital data and make a service for it
// the proto hospital can have doctor and patient as a nested message
// the proto file can have a service for the hospital

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: hospital.proto

package hospital

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HospitalService_CreateHospital_FullMethodName = "/hospital.HospitalService/CreateHospital"
	HospitalService_GetHospital_FullMethodName    = "/hospital.HospitalService/GetHospital"
	HospitalService_GetPatients_FullMethodName    = "/hospital.HospitalService/GetPatients"
	HospitalService_AddPatient_FullMethodName     = "/hospital.HospitalService/AddPatient"
	HospitalService_GetPatientById_FullMethodName = "/hospital.HospitalService/GetPatientById"
)

// HospitalServiceClient is the client API for HospitalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HospitalServiceClient interface {
	CreateHospital(ctx context.Context, in *Hospital, opts ...grpc.CallOption) (*HospitalResponse, error)
	GetHospital(ctx context.Context, in *HospitalRequest, opts ...grpc.CallOption) (*HospitalResponse, error)
	GetPatients(ctx context.Context, in *PatientRequest, opts ...grpc.CallOption) (*PatientResponse, error)
	AddPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*PatientResponse, error)
	GetPatientById(ctx context.Context, in *PatientId, opts ...grpc.CallOption) (*PatientResponse, error)
}

type hospitalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHospitalServiceClient(cc grpc.ClientConnInterface) HospitalServiceClient {
	return &hospitalServiceClient{cc}
}

func (c *hospitalServiceClient) CreateHospital(ctx context.Context, in *Hospital, opts ...grpc.CallOption) (*HospitalResponse, error) {
	out := new(HospitalResponse)
	err := c.cc.Invoke(ctx, HospitalService_CreateHospital_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetHospital(ctx context.Context, in *HospitalRequest, opts ...grpc.CallOption) (*HospitalResponse, error) {
	out := new(HospitalResponse)
	err := c.cc.Invoke(ctx, HospitalService_GetHospital_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetPatients(ctx context.Context, in *PatientRequest, opts ...grpc.CallOption) (*PatientResponse, error) {
	out := new(PatientResponse)
	err := c.cc.Invoke(ctx, HospitalService_GetPatients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) AddPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*PatientResponse, error) {
	out := new(PatientResponse)
	err := c.cc.Invoke(ctx, HospitalService_AddPatient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetPatientById(ctx context.Context, in *PatientId, opts ...grpc.CallOption) (*PatientResponse, error) {
	out := new(PatientResponse)
	err := c.cc.Invoke(ctx, HospitalService_GetPatientById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HospitalServiceServer is the server API for HospitalService service.
// All implementations must embed UnimplementedHospitalServiceServer
// for forward compatibility
type HospitalServiceServer interface {
	CreateHospital(context.Context, *Hospital) (*HospitalResponse, error)
	GetHospital(context.Context, *HospitalRequest) (*HospitalResponse, error)
	GetPatients(context.Context, *PatientRequest) (*PatientResponse, error)
	AddPatient(context.Context, *Patient) (*PatientResponse, error)
	GetPatientById(context.Context, *PatientId) (*PatientResponse, error)
	mustEmbedUnimplementedHospitalServiceServer()
}

// UnimplementedHospitalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHospitalServiceServer struct {
}

func (UnimplementedHospitalServiceServer) CreateHospital(context.Context, *Hospital) (*HospitalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHospital not implemented")
}
func (UnimplementedHospitalServiceServer) GetHospital(context.Context, *HospitalRequest) (*HospitalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHospital not implemented")
}
func (UnimplementedHospitalServiceServer) GetPatients(context.Context, *PatientRequest) (*PatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (UnimplementedHospitalServiceServer) AddPatient(context.Context, *Patient) (*PatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPatient not implemented")
}
func (UnimplementedHospitalServiceServer) GetPatientById(context.Context, *PatientId) (*PatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientById not implemented")
}
func (UnimplementedHospitalServiceServer) mustEmbedUnimplementedHospitalServiceServer() {}

// UnsafeHospitalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HospitalServiceServer will
// result in compilation errors.
type UnsafeHospitalServiceServer interface {
	mustEmbedUnimplementedHospitalServiceServer()
}

func RegisterHospitalServiceServer(s grpc.ServiceRegistrar, srv HospitalServiceServer) {
	s.RegisterService(&HospitalService_ServiceDesc, srv)
}

func _HospitalService_CreateHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hospital)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).CreateHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_CreateHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).CreateHospital(ctx, req.(*Hospital))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetHospital(ctx, req.(*HospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetPatients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetPatients(ctx, req.(*PatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_AddPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).AddPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_AddPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).AddPatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetPatientById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetPatientById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetPatientById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetPatientById(ctx, req.(*PatientId))
	}
	return interceptor(ctx, in, info, handler)
}

// HospitalService_ServiceDesc is the grpc.ServiceDesc for HospitalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HospitalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hospital.HospitalService",
	HandlerType: (*HospitalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHospital",
			Handler:    _HospitalService_CreateHospital_Handler,
		},
		{
			MethodName: "GetHospital",
			Handler:    _HospitalService_GetHospital_Handler,
		},
		{
			MethodName: "GetPatients",
			Handler:    _HospitalService_GetPatients_Handler,
		},
		{
			MethodName: "AddPatient",
			Handler:    _HospitalService_AddPatient_Handler,
		},
		{
			MethodName: "GetPatientById",
			Handler:    _HospitalService_GetPatientById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}
